#include <avr32/io.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include <sys/stat.h>
#include <sys/types.h>
#include <sys/times.h>
#include <sys/time.h>
#include <util/clock.h>
#include <errno.h>
#undef errno
extern int errno;

#include <avr32_reset_cause.h>
#include "wdt.h"

int unimplemented_syscall(char *name) {
	printf("Unimplemented syscall %s\r\n", name);
	return -1;
}

int _fcntl() {
	return unimplemented_syscall("_fcntl");
}

int _gettimeofday(struct timeval *__p, void *__tz) {
	clock_get_time((timestamp_t *)__p);
	return 1;
}

int sigfillset() {
	return unimplemented_syscall("sigfillset");
}

int sigprocmask() {
	return unimplemented_syscall("sigprocmask");
}

char *__env[1] = { 0 };
char **environ = __env;

int execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
	return -1;
}

int fork(void) {
	errno = EAGAIN;
	return -1;
}

int wait(int *status) {
	errno = ECHILD;
	return -1;
}

int kill(int pid, int sig) {
	errno = EINVAL;
	return -1;
}

int getpid(void) {
	return 1;
}

clock_t times(struct tms *tms) {
	int tick;
	tick = __builtin_mfsr(0x00000108);
	tms->tms_utime = 0;
	tms->tms_stime = tick;
	tms->tms_cutime = 0;
	tms->tms_cstime = 0;
	return tick;
}

/**
 * Convert a linker symbol into a global variable that can be overridden in main.c
 * before the first call to _sbrk. This can be used to move the heap from internal
 * to external SDRAM
 */
extern void __heap_start__, __heap_end__;
void * heap_start = &__heap_start__;
void * heap_end = &__heap_end__;

void * _sbrk(int increment) {

	static void *cur_heap_pos = 0;

	//Initialize cur_heap_pos
	if (cur_heap_pos == 0)
		cur_heap_pos = heap_start;

	if ((cur_heap_pos + increment) >= (void *) heap_end) {
#if 0
		extern unsigned long __malloc_top_pad;
		printf("Top pad %lu\r\n", __malloc_top_pad);
		printf("Warning: Heap is running full trying to allocate %i bytes!!!!\r\n", increment);
		printf("\tHeap start address\t= %p\r\n", &__heap_start__);
		printf("\tHeap end address\t= %p\r\n", (void *) &__heap_end__);
		printf("\tCurrent heap address\t= %p\r\n", cur_heap_pos);
#endif
		errno = ENOMEM;
		return (void *) -1;
	}

	void * old_heap_pos = cur_heap_pos;
	cur_heap_pos += increment;
	return old_heap_pos;

}

void _exit(int code) {
	wdt_clear();
	reset_do_soft_reset();
	while (1);
}
